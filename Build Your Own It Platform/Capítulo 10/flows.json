[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3cc11d24.ff01a2",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "WARNING: please check you have started this container with a volume that is mounted to /data\\n otherwise any flow changes are lost when you redeploy or upgrade the container\\n (e.g. upgrade to a more recent node-red docker image).\\n  If you are using named volumes you can ignore this warning.\\n Double click or see info side panel to learn how to start Node-RED in Docker to save your work",
        "info": "\nTo start docker with a bind mount volume (-v option), for example:\n\n```\ndocker run -it -p 1880:1880 -v /home/user/node_red_data:/data --name mynodered nodered/node-red\n```\n\nwhere `/home/user/node_red_data` is a directory on your host machine where you want to store your flows.\n\nIf you do not do this then you can experiment and redploy flows, but if you restart or upgrade the container the flows will be disconnected and lost. \n\nThey will still exist in a hidden data volume, which can be recovered using standard docker techniques, but that is much more complex than just starting with a named volume as described above.",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "218779d22c6cda80",
        "type": "mysql",
        "z": "f6f2187d.f17ca8",
        "mydb": "3263b37c8a11f7c0",
        "name": "",
        "x": 800,
        "y": 340,
        "wires": [
            [
                "16c8871979e388ea"
            ]
        ]
    },
    {
        "id": "3232a392fea4bd24",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "// Create query\n// get microtime\nvar timestamp = new Date().getTime()/1000;\n// pad it with trailing zeroes\ntimestamp = timestamp.toString() + \"000\";\n// trim to exact length 10 + 1 + 3\ntimestamp = timestamp.substring(0, 14);\nvar strQuery = \"INSERT INTO thingData (topic, payload,timestamp, deleted) VALUES ('\" + escape(msg.topic) + \"','\" + escape(msg.payload) + \"','\" + timestamp + \"', 0);\";\nmsg.topic = strQuery;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 340,
        "wires": [
            [
                "218779d22c6cda80"
            ]
        ]
    },
    {
        "id": "8abe237bb5519e79",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/pub/:topic/:payload",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 330,
        "y": 440,
        "wires": [
            [
                "ce71ca0305ee38d3"
            ]
        ]
    },
    {
        "id": "ce71ca0305ee38d3",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "create message",
        "func": "msg.topic = msg.req.params.topic;\nmsg.payload = msg.req.params.payload;\nmsg.qos = 2;\nmsg.retain = false;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 440,
        "wires": [
            [
                "5905ea996d1975af",
                "f76028d43b93a08c"
            ]
        ]
    },
    {
        "id": "5905ea996d1975af",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "create response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 440,
        "wires": [
            [
                "21b8786694a7b214"
            ]
        ]
    },
    {
        "id": "21b8786694a7b214",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 440,
        "wires": []
    },
    {
        "id": "f76028d43b93a08c",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "mqtt",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "549b0af5095b3af8",
        "x": 790,
        "y": 500,
        "wires": []
    },
    {
        "id": "b55ddc00ccae1be4",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/get/:topic",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 360,
        "y": 540,
        "wires": [
            [
                "48fce74326e97763"
            ]
        ]
    },
    {
        "id": "48fce74326e97763",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "create query",
        "func": "// if required record count is not specified\n// set default to 1\nif(!msg.req.params.count)\n msg.req.params.count = 1;\n// build the sql query\nmsg.topic = \"SELECT id,topic,payload,timestamp \" +\n \"FROM thingData \" +\n \"WHERE topic='\" + escape(msg.req.params.topic) + \"' \" +\n \"AND deleted=0 \" +\n \"ORDER BY id DESC \" +\n \"LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 600,
        "wires": [
            [
                "0e405eb2983e2e0b"
            ]
        ]
    },
    {
        "id": "eb319585d5250980",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/get/:topic/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 330,
        "y": 600,
        "wires": [
            [
                "48fce74326e97763"
            ]
        ]
    },
    {
        "id": "0e405eb2983e2e0b",
        "type": "mysql",
        "z": "f6f2187d.f17ca8",
        "mydb": "3263b37c8a11f7c0",
        "name": "",
        "x": 940,
        "y": 720,
        "wires": [
            [
                "835e5ab067c62759"
            ]
        ]
    },
    {
        "id": "267ac4d0d72bac90",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1300,
        "y": 720,
        "wires": []
    },
    {
        "id": "835e5ab067c62759",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "prepare response",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 720,
        "wires": [
            [
                "267ac4d0d72bac90"
            ]
        ]
    },
    {
        "id": "16c8871979e388ea",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 340,
        "wires": []
    },
    {
        "id": "01e6db20f425429c",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "mqtt",
        "qos": "2",
        "datatype": "auto",
        "broker": "549b0af5095b3af8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 340,
        "wires": [
            [
                "3232a392fea4bd24"
            ]
        ]
    },
    {
        "id": "92aae9709df811d3",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/get/topicLike/:topic/payloadLike/:payload/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 660,
        "wires": [
            [
                "7606c84de3c29290"
            ]
        ]
    },
    {
        "id": "7606c84de3c29290",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Create query",
        "func": "// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n msg.req.authFilter = 1;\n\nmsg.topic = \"SELECT id,topic,payload,timestamp\" +\n \" FROM thingData WHERE\" +\n \" topic LIKE '\" + msg.req.params.topic.\nreplace(/\\*/g, \"%\") + \"'\" +\n \" AND\" +\n \" payload LIKE '\" + msg.req.params.payload.\nreplace(/\\*/g, \"%\") + \"'\" +\n \" AND deleted=0\" +\n \" AND (\" + msg.req.authFilter + \")\" +\n \" ORDER BY ID DESC\" +\n \" LIMIT \" + msg.req.params.count + \";\";\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 660,
        "wires": [
            [
                "0e405eb2983e2e0b"
            ]
        ]
    },
    {
        "id": "4282a7d5a3ec49d0",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/get/:topic/after/:time/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 300,
        "y": 720,
        "wires": [
            [
                "4b3395780c860448"
            ]
        ]
    },
    {
        "id": "6d855a76dd57099c",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/get/:topic/before/:time/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 290,
        "y": 780,
        "wires": [
            [
                "7107283c5473dc07"
            ]
        ]
    },
    {
        "id": "bef91f05d71a5137",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/get/:topic/during/:start/:end/last/:count",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 840,
        "wires": [
            [
                "e6e17d2df31909fa"
            ]
        ]
    },
    {
        "id": "4b3395780c860448",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "// Create 'AFTER' query\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wildcard character %\nmsg.topic = \"SELECT id,topic,payload,timestamp\" +\n \" FROM thingData WHERE\" +\n \" topic LIKE '\" + msg.req.params.topic.\nreplace(/\\*/g, \"%\") + \"'\" +\n \" AND\" +\n \" timestamp >= '\" + msg.req.params.time + \"'\" +\n \" AND deleted=0\" +\n \" AND (\" + msg.req.authFilter + \")\" +\n \" ORDER BY ID DESC\" +\n \" LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "0e405eb2983e2e0b"
            ]
        ]
    },
    {
        "id": "7107283c5473dc07",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wildcard character %\nmsg.topic = \"SELECT id,topic,payload,timestamp\" +\n \" FROM thingData WHERE\" +\n \" topic LIKE '\" + msg.req.params.topic.\nreplace(/\\*/g, \"%\") + \"'\" +\n \" AND\" +\n \" timestamp <= '\" + msg.req.params.time + \"'\" +\n \" AND deleted=0\" +\n \" AND (\" + msg.req.authFilter + \")\" +\n \" ORDER BY ID DESC\" +\n \" LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 780,
        "wires": [
            [
                "0e405eb2983e2e0b"
            ]
        ]
    },
    {
        "id": "e6e17d2df31909fa",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n msg.req.authFilter = 1;\n// wildcard used for API query is * and this needs to be converted into SQL wildcard character %\nmsg.topic = \"SELECT id,topic,payload,timestamp\" +\n \" FROM thingData WHERE\" +\n \" topic LIKE '\" + msg.req.params.topic.\nreplace(/\\*/g, \"%\") + \"'\" +\n \" AND\" +\n \" timestamp >= '\" + msg.req.params.start + \"'\" +\n \" AND\" +\n \" timestamp <='\" + msg.req.params.end + \"'\" +\n \" AND deleted=0\" +\n \" AND (\" + msg.req.authFilter + \")\" +\n \" ORDER BY ID DESC\" +\n \" LIMIT \" + msg.req.params.count + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 840,
        "wires": [
            [
                "0e405eb2983e2e0b"
            ]
        ]
    },
    {
        "id": "989b846f4efd7f40",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/purge/:topic/id/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 320,
        "y": 1020,
        "wires": [
            [
                "f196f08320a49bea"
            ]
        ]
    },
    {
        "id": "a362d110eadd5b1c",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/purge/:topic",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 350,
        "y": 1080,
        "wires": [
            [
                "461d023535718dbe"
            ]
        ]
    },
    {
        "id": "02701fe6d5211c45",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/purge/:topic/first/:count",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 1140,
        "wires": [
            [
                "9334df7f32fd39de"
            ]
        ]
    },
    {
        "id": "4dee5f35604fbe02",
        "type": "http in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "url": "/purge/:topic/last/:count",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 310,
        "y": 1200,
        "wires": [
            [
                "3c4e3ccf7fb4430d"
            ]
        ]
    },
    {
        "id": "f196f08320a49bea",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n msg.req.authFilter = 1;\nmsg.topic = \"UPDATE thingData\" +\n \" SET deleted=1\" +\n \" WHERE\" +\n \" topic='\" + msg.req.params.topic + \"'\" +\n \" AND (\" + msg.req.authFilter + \")\" +\n \" AND id=\" + msg.req.params.id + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1020,
        "wires": [
            [
                "d44b1da21882540f"
            ]
        ]
    },
    {
        "id": "461d023535718dbe",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n msg.req.authFilter = 1;\nmsg.topic = \"UPDATE thingData\" +\n \" SET deleted=1 \" +\n \" WHERE\" +\n \" topic='\" + msg.req.params.topic + \"'\" +\n \" AND (\" + msg.req.authFilter + \");\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1080,
        "wires": [
            [
                "d44b1da21882540f"
            ]
        ]
    },
    {
        "id": "9334df7f32fd39de",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "// if required record count is not specified\n// set default to 1\nif(!msg.req.params.count)\n msg.req.params.count = 1;\n// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n msg.req.authFilter = 1;\nmsg.topic = \"DELETE thingData\" +\n \" WHERE deleted=1\" +\n \" AND\" +\n \" topic='\" + msg.req.params.topic + \"'\" +\n \" AND (\" + msg.req.authFilter + \")\" +\n \" ORDER BY id DESC LIMIT \" + msg.req.params.count +\n\";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1140,
        "wires": [
            [
                "d44b1da21882540f"
            ]
        ]
    },
    {
        "id": "3c4e3ccf7fb4430d",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "// if no authentication filter defined or available\n// set the default value as 1\nif(!msg.req.authFilter)\n msg.req.authFilter = 1;\nmsg.topic = \"DELETE thingData\" +\n \" WHERE deleted=1\" +\n \" AND\" +\n \" topic='\" + msg.req.params.topic + \"'\" +\n \" AND (\" + msg.req.authFilter + \")\" +\n \" AND id=\" + msg.req.params.id + \";\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1200,
        "wires": [
            [
                "d44b1da21882540f"
            ]
        ]
    },
    {
        "id": "d44b1da21882540f",
        "type": "mysql",
        "z": "f6f2187d.f17ca8",
        "mydb": "3263b37c8a11f7c0",
        "name": "",
        "x": 940,
        "y": 1080,
        "wires": [
            [
                "fb2ecd2661a0eebb"
            ]
        ]
    },
    {
        "id": "fb2ecd2661a0eebb",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "msg.payload = {\n \"found\": msg.payload.affectedRows,\n \"changed\": msg.payload.changedRows,\n};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 1080,
        "wires": [
            [
                "1320a77f11dc1812"
            ]
        ]
    },
    {
        "id": "1320a77f11dc1812",
        "type": "http response",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1310,
        "y": 1080,
        "wires": []
    },
    {
        "id": "1b85c6d1e567ef08",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "func": "msg.topic = \"SELECT * FROM ruleEngine\" +\n \" WHERE\" +\n \" ('\" + msg.topic + \"' LIKE topicPattern)\" +\n \" AND\" +\n \" ('\" + msg.payload + \"' LIKE payloadPattern)\" +\n \" AND active=1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1320,
        "wires": [
            [
                "cd0daef78b488564"
            ]
        ]
    },
    {
        "id": "2abddf32b9efa795",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 1320,
        "wires": []
    },
    {
        "id": "3d959e49f21c75b2",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "call webHook",
        "func": "// Call webhook\nif(msg.payload.length !== 0)\n{\n for(var i = 0; i < msg.payload.length; i++)\n {\n msg.method = msg.payload[i].method;\n msg.url = msg.payload[i].webHook;\n node.send([msg]);\n }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 1320,
        "wires": [
            [
                "bdfa7c496315406d"
            ]
        ]
    },
    {
        "id": "71e845b1e79676d0",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "topic": "mqtt",
        "qos": "2",
        "datatype": "auto",
        "broker": "549b0af5095b3af8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 390,
        "y": 1320,
        "wires": [
            [
                "1b85c6d1e567ef08"
            ]
        ]
    },
    {
        "id": "cd0daef78b488564",
        "type": "mysql",
        "z": "f6f2187d.f17ca8",
        "mydb": "3263b37c8a11f7c0",
        "name": "",
        "x": 720,
        "y": 1320,
        "wires": [
            [
                "3d959e49f21c75b2"
            ]
        ]
    },
    {
        "id": "bdfa7c496315406d",
        "type": "http request",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "method": "use",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1070,
        "y": 1320,
        "wires": [
            [
                "2abddf32b9efa795"
            ]
        ]
    },
    {
        "id": "3263b37c8a11f7c0",
        "type": "MySQLdatabase",
        "name": "",
        "host": "db",
        "port": "3306",
        "db": "tSeriesDB",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "549b0af5095b3af8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mosquitto",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    }
]